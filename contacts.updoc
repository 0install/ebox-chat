? introducer.onTheAir()
? def acceptCall(callerName :String, caller) {
>   println(`Call from $callerName`)
>   caller.say("Hello")
>   return def alicesLog { to say(msg) { println(`$callerName says $msg`); return "What?" } }
> }
? def makeDummyFile() {
>   var saved := null
>   def dummyFile {
>     to setText(new) { print("Saved"); saved := new }
>     to getText() :String { return saved }
>   }
>   return def atomicDummyFile {
>     to exists() { return saved != null }
>     to getNextFile() { return dummyFile }
>     to getNowFile() { return dummyFile }
>     to commit() { }
>   }
> }

Create a new contacts list and add a contact called Bob:

? def aliceFile := makeDummyFile()
? def aliceList := <this:makeContactsList>(introducer, identityMgr, aliceFile, acceptCall)
? def bob := aliceList.addContact("Bob")
# stdout: Saved
? var bobStatus := null
? bob.monitorStatus((&bobStatus).put)
? bob
# value: <contact>
? bobStatus
# value: "unpaired"

Send an invite to Bob:

? def inviteForBob := makeDummyFile().getNowFile()
? def exporter := bob.getInviteExporter()
? exporter.getDefaultFilename()
# value: "Bob.invite"
? exporter.saveAs(inviteForBob)
? bobStatus
# value: "invitation sent"

We can't import our own invitation:

? def done := bob.getInviteImporter().open(inviteForBob)
? interp.waitAtTop(done)
? done
# value: <ref broken by problem: can't import our own invitation!>

Over on Bob's computer... create a contacts list for Bob too:

? def bobList := <this:makeContactsList>(introducer, identityMgr, makeDummyFile(), null)

Add Alice to his contacts and import her invitation:

? def alice := bobList.addContact("Alice")
? var aliceStatus := null
? alice.monitorStatus((&aliceStatus).put)
? aliceStatus
# value: "unpaired"

? def done := alice.getInviteImporter().open(inviteForBob)
? interp.waitAtTop(done)
# stdout: SavedSaved
? done == null
# value: true
? aliceStatus
# value: "paired"

? bobStatus
# value: "paired"

? <unsafe:org.erights.e.develop.trace.makeTraceController>.setProperty("tracelog_causality", "error")
? def open := alice.getInviteImporter().open(inviteForBob)
? interp.waitAtTop(open)
? open
# value: <ref broken by problem: already paired!>
? <unsafe:org.erights.e.develop.trace.makeTraceController>.setProperty("tracelog_causality", "default")

Bob calls Alice

? def bobsLog { to say(msg :String) { println(`Alice says: $msg`) } }
? def call := alice.getRemote().call(bobsLog)
? call.say("Hi!")
# stdout: Bob says Hi!
#

# value: "What?"

? def invite1 := makeDummyFile().getNowFile()
? def invite2 := makeDummyFile().getNowFile()
? exporter.saveAs(invite1)
? def pair1 := introducer.sturdyFromURI(invite1.getText()).getRcvr()
? exporter.saveAs(invite2)
? pair1.pair(alice.getEndpoint())
# problem: pairing offer superceeded by new offer

? def carol := aliceList.addContact("Carol")
? bob.rename("Bob")
? bob.rename("Carol")
# problem: already have a contact named Carol!

? bob.rename("Robert")
# stdout: Saved

? aliceList.listContacts()
# value: ["Carol" => <contact>, "Robert" => <contact>]
? bob.getName()
# value: "Robert"

? def dummyIdentityMgr { to makeSturdyRef(obj, base, time) {} }
? def dummyIntroducer { to get(uri) { return null } }
? def newList := <this:makeContactsList>(dummyIntroducer, dummyIdentityMgr, aliceFile, acceptCall)
# value: <contactsList>
? newList.listContacts()
# value: ["Carol" => <contact>, "Robert" => <contact>]

? bob.remove()
# stdout: Saved
? alice.getRemote().call(bobsLog)
# problem: contact removed

? carol.remove()
# stdout: Saved

? def eParser := <elang:syntax.makeEParser>
? eParser(aliceFile.getNowFile().getText()).eval(safeScope)
# value: [].asMap()
