? var saved := null
? introducer.onTheAir()
? def acceptCall(callerName :String, caller) {
>   println(`Call from $callerName`)
>   caller.say("Hello")
>   return def alicesLog { to say(msg) { println(`$callerName says $msg`); return "What?" } }
> }
? def dummyFile {
>   to exists() { return saved != null }
>   to setText(new) { print("Saved"); saved := new }
>   to getText() :String { return saved }
> }

Create a new contacts list and add a contact called Bob:

? def list := <this:makeContactsList>(identityMgr, dummyFile, acceptCall)
? def bob := list.addContact("Bob")
# stdout: Saved
? bob
# value: <contact>
? bob.getStatus()
# value: "unpaired"

Send an invite to Bob:

? def pair := bob.getPairingEndpoint()
? bob.getStatus()
# value: "pairing"
? def endpoint := pair.getRcvr().run()
# value: <SturdyRef to <endpoint>>

# stdout: Saved

? bob.getStatus()
# value: "paired"

? pair.getRcvr().run()
# problem: already paired!

Bob calls Alice:

? def bobsLog { to say(msg :String) { println(`Alice says: $msg`) } }
? def call := endpoint.getRcvr().call(bobsLog)
? call.say("Hi!")
# stdout: Bob says Hi!
#

# value: "What?"

? def pair1 := bob.getPairingEndpoint()
? def pair2 := bob.getPairingEndpoint()
? pair1.getRcvr().run()
# problem: pairing offer superceeded by new offer

? bob.rename("Bob")
# problem: already have a contact named Bob!

? bob.rename("Robert")
# stdout: Saved

? list.listContacts()
# value: ["Robert" => <contact>]
? bob.getName()
# value: "Robert"

? def dummyIdentityMgr { to makeSturdyRef(obj, base, time) {} }
? def newList := <this:makeContactsList>(dummyIdentityMgr, dummyFile, acceptCall)
# value: <contactsList>
? newList.listContacts()
# value: ["Robert" => <contact>]

? bob.remove()
# stdout: Saved
? endpoint.getRcvr().call(bobsLog)
# problem: contact removed

? def eParser := <elang:syntax.makeEParser>
? eParser(saved).eval(safeScope)
# value: [].asMap()
