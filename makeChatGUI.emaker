def <swt> := <import:org.eclipse.swt.*>
def <widget> := <swt:widgets.*>
def SWT := <swt:makeSWT>
def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makePairingPanel(group, importExport) {
	group.setText("Set up pairing")

	def label := <widget:makeLabel>(group, SWT.getWRAP())
	label.setText("You need to 'pair' this instance with the person with whom you want to chat.\n" +
			"One of you should export a pairing capability and the other should import it.\n" +
			"The pairing capability should be sent by secure means and protected until " +
			"pairing is complete.")

	def exportButton := <widget:makeButton>(group, SWT.getPUSH())
	exportButton.setText("Export pairing capability")

	def importButton := <widget:makeButton>(group, SWT.getPUSH())
	importButton.setText("Import pairing capability")

	exportButton.addSelectedListener(def _ {
		to widgetSelected(ev) {
			importExport.exportCap()
		}
	})

	swtGrid`$group: $label.X
			$exportButton.X $importButton.X`
}

def makePairedPanel(group, done) {
	group.setText("Ready to connect")

	def label := <widget:makeLabel>(group, SWT.getWRAP())
	label.setText("Click Connect to start a call.")

	swtGrid`$group: $label.X.Y`
}

def makeChatGUI(powerbox, networking) {
	def shell := powerbox.makeShell()
	shell.setText("Boxchat")
	shell.open()

	def panel := shell.getPanel()

	def log := <widget:makeText>(panel, SWT.getBORDER() | SWT.getWRAP() | SWT.getREAD_ONLY())

	var partner := powerbox.fetchAuth("partner", fn { null })
	var controls := null

	def makeControls() {
		if (controls != null) {
			controls.dispose()
		}
		controls := <widget:makeGroup>(panel, 0)

		if (partner == null) {
			def importExport {
				to getDefaultFilename() {
					return "pairing.cap"
				}

				to saveFile(file) {
					file.setText(introducer.sturdyToURI(pairingSR))
					makeControls<-()
				}
			}

			makePairingPanel(controls, def _ {
				to exportCap() {
					shell.saveFile(importExport)
				}
			})
		} else {
			makePairedPanel(controls, makeControls)
		}

		swtGrid`$panel: $log.X.Y
				$controls.X.Y`
	}

	makeControls()

	return def gui {
		to log(msg :String) {
			log.append(`system: $msg` + "\n")
		}
	}
}
