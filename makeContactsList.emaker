def eParser := <elang:syntax.makeEParser>
def Term := <type:org.quasiliteral.term.Term>
def MAX_LONG := 0x7fffffffffffffff

def makeContactsList(introducer, identityMgr, contactsFile, acceptCall) {
	def surgeon := <elib:serial.makeSurgeon>.withSrcKit(null).diverge()
	surgeon.addExit(introducer, "captp__uriGetter")
	surgeon.addLoader(introducer, "captp__uriGetter")

	var contactsDoc := if (contactsFile.exists()) {
		eParser(contactsFile.getNowFile().getText()).eval(safeScope.with([ "captp__uriGetter" => introducer ]))
	} else {
		[].asMap()
	}

	def save() {
		contactsFile.getNextFile().setText(surgeon.serialize(contactsDoc))
		contactsFile.commit()
	}

	def nameToContact := [].asMap().diverge()

	def makeContact(swissBase) {
		var optProblem := null

		def getName() {
			return contactsDoc[swissBase]["name"]
		}

		def endpoint {
			to call(caller) {
				require(optProblem == null, optProblem)

				return acceptCall(getName(), caller)
			}
		}

		def endpointSR := identityMgr.makeSturdyRef(endpoint, swissBase, MAX_LONG)

		var currentPairing := null

		var status := null
		def myNotifier
		def changed(newStatus :String) {
			status := newStatus
			myNotifier<-(newStatus)
		}

		changed(
			if (contactsDoc[swissBase].fetch("remoteEnd", fn {null}) != null) {
				"paired"
			} else {
				"unpaired"
			}
		)

		def getPairingEndpoint() {
			require(optProblem == null, optProblem)

			if (currentPairing != null) {
				currentPairing.disable()
				currentPairing := null
			}

			var optPairingProblem := null
			def pair {
				to pair(remoteEnd :SturdyRef) {
					require(optPairingProblem == null, optPairingProblem)
					optPairingProblem := Ref.broken("already paired!")
					currentPairing := null
					contactsDoc with= (swissBase, contactsDoc[swissBase].with("remoteEnd", remoteEnd))
					save()
					changed("paired")
					return endpointSR
				}

				to disable() {
					optPairingProblem := Ref.broken("pairing offer superceeded by new offer")
				}
			}
			currentPairing := pair		# Prevent GC
			return identityMgr.makeSturdyRef(pair, identityMgr.nextSwiss(), MAX_LONG)
		}

		def contact {
			to getEndpoint() {
				endpoint		# (prevents endpoint getting GC'd)
				return endpointSR
			}

			to getRemote() {
				return contactsDoc[swissBase]["remoteEnd"].getRcvr()
			}

			to getStatus() {
				return status
			}

			to monitorStatus(notifier) {
				bind myNotifier := notifier
			}

			to getName() {
				return getName()
			}

			to rename(newName :String) {
				require(optProblem == null, optProblem)
				if (newName == getName()) {
					return
				}

				if (nameToContact.maps(newName)) {
					throw(`already have a contact named $newName!`)
				} else {
					nameToContact.removeKey(getName())
					nameToContact[newName] := contact
					contactsDoc with= (swissBase, contactsDoc[swissBase].with("name", newName))

					save()
				}
			}

			to remove() {
				require(optProblem == null, optProblem)
				optProblem := Ref.broken(`contact removed`)
				nameToContact.removeKey(getName())
				contactsDoc without= (swissBase)

				save()
			}

			to getInviteExporter() {
				return def inviteExporter {
					to getDefaultFilename() {
						return `${getName()}.invite`
					}

					to saveAs(file) {
						file.setText(introducer.sturdyToURI(getPairingEndpoint()))
						changed("invitation sent")
					}
				}
			}

			to getInviteImporter() {
				return def inviteExporter {
					to open(file) {
						def inviteSR := introducer.sturdyFromURI(file.getText())
						def invite := inviteSR.getRcvr()
						changed("accepting invitation")
						return when (invite) -> {
							if (invite == currentPairing) {
								throw("can't import our own invitation!")
								changed("unpaired")
							}
							when (def remoteEnd := invite<-pair(contact.getEndpoint())) -> {
								contactsDoc with= (swissBase, contactsDoc[swissBase].with("remoteEnd", remoteEnd))
								save()
								changed("paired")
							}
						} catch ex {
							changed("failed")
							throw(ex)
						}
					}
				}
			}

		}

		def name := contact.getName()
		require(!nameToContact.maps(name), `already have a contact named $name!`)
		nameToContact[name] := contact

		return contact
	}

	def pickUnusedName(suggestion :String) {
		if (!nameToContact.maps(suggestion)) {
			return suggestion
		}

		var i := 2
		while (true) {
			def attempt := `$suggestion $i`
			if (!nameToContact.maps(attempt)) {
				return attempt
			}
			i += 1
		}
	}

	for swissBase => info in contactsDoc {
		def obj := makeContact(swissBase)
	}

	return def contactsList {
		to addContact(suggestedName :String) {
			def swissBase := identityMgr.nextSwiss()
			def name := pickUnusedName(suggestedName)
			def info := [ => name ]
			contactsDoc with= (swissBase, info)
			def obj := makeContact(swissBase)
			save()
			return obj
		}

		to listContacts() :Map {
			return nameToContact.sortKeys()
		}
	}
}
