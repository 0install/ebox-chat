def <swt> := <import:org.eclipse.swt.*>
def <widget> := <swt:widgets.*>
def SWT := <swt:makeSWT>
def <swttools> := <import:org.erights.e.ui.swt.*>
def swtGrid__quasiParser := <swttools:swtGridQParserMaker>()

def makeEditor(tree) {
	def treeEditor := <swt:custom.makeTreeEditor>(tree)
	treeEditor.setHorizontalAlignment(SWT.getLEFT())
	treeEditor.setGrabHorizontal(true)
	treeEditor.setMinimumWidth(50)

	return def edit(item, initialText, doneCallback) {
		def text := <widget:makeText>(tree, 0)
		text.setText(initialText)
		text.selectAll()
		<widget:makeControl>.transferFocus([tree], text)

		text.addKeyListener(def _ {
			to keyPressed(event) {
				def key := event.getCharacter()
				if (key == SWT.getCR()) {
					doneCallback(text.getText())
					text.dispose()
				} else if (key == SWT.getESC()) {
					text.dispose()
				}
			}
			match [verb, args] {
			}
		})

		text.addFocusListener(def _ {
			to focusLost(event) {
				doneCallback(text.getText())
				text.dispose()
			}
			match [verb, args] {
			}
		})

		treeEditor.setEditor(text, item)
	}
}

def makeContactsGUI(powerbox, contactsList) {
	def shell := powerbox.makeShell()
	shell.setText("Contacts")
	shell.open()

	def panel := shell.getPanel()

	def list := <widget:makeTree>(panel, SWT.getBORDER())
	def itemToContact := [].asMap().diverge()
	def rename := makeEditor(list)

	def menu := <widget:makeMenu>(list)

	def setLabel(item) {
		def contact := itemToContact[item]
		def name := contact.getName()
		def status := contact.getStatus()
		item.setText(`$name ($status)`)
	}

	def guiRename(item) {
		def contact := itemToContact[item]
		rename(item, contact.getName(), def _(newName) {
			contact.rename(newName)
			setLabel(item)
		})
	}

	def renameItem := <widget:makeMenuItem>(menu, 0)
	renameItem.setText("Rename")
	renameItem.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def [item] := list.getSelection()
			guiRename(item)
		}
	})

	def call := <widget:makeMenuItem>(menu, 0)
	call.setText("Call")
	call.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def [item] := list.getSelection()
			def contact := itemToContact[item]
			def name := contact.getName()
			def callShell := powerbox.makeShell()
			callShell.setText(`calling $name`)
			def remoteEnd
			def callGUI := <this:makeCallGUI>(callShell, name, remoteEnd)
			callGUI.log("Dialing...")
			bind remoteEnd := contact.getRemote()<-call(callGUI.getLocalEnd())
		}
	})

	def invite := <widget:makeMenuItem>(menu, 0)
	invite.setText("Send Invitation")
	invite.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def [item] := list.getSelection()
			def contact := itemToContact[item]
			shell.saveFile(contact.getInviteExporter())
		}
	})

	def accept := <widget:makeMenuItem>(menu, 0)
	accept.setText("Accept Invitation")
	accept.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def [item] := list.getSelection()
			def contact := itemToContact[item]
			shell.openFile(contact.getInviteImporter())
		}
	})

	def remove := <widget:makeMenuItem>(menu, 0)
	remove.setText("Remove Contact")
	remove.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def [item] := list.getSelection()
			def contact := itemToContact[item]
			if (shell.confirm(`Remove ${contact.getName()}?`)) {
				contact.remove()
				item.dispose()
				itemToContact.removeKey(item)
			}
		}
	})

	list.setMenu(menu)

	def addButton := <widget:makeButton>(panel, SWT.getPUSH())
	addButton.setText("Add Contact...")

	def nameToItem := [].asMap().diverge()

	addButton.addSelectionListener(def _ {
		to widgetSelected(ev) {
			def item := <widget:makeTreeItem>(list, 0)
			<widget:makeControl>.transferFocus([panel], list)
			def contact := contactsList.addContact("<unnamed contact>")
			itemToContact[item] := contact
			setLabel(item)
			guiRename(item)
			contact.monitorStatus(fn newStatus { setLabel(item) })
		}
	})

	list.addSelectionListener(def _ {
		to widgetSelected(ev) {
		}

		to widgetDefaultSelected(ev) {
			menu.setVisible(true)
		}
	})

	for contactName => contact in contactsList.listContacts() {
		def item := <widget:makeTreeItem>(list, 0)
		itemToContact[item] := contact
		setLabel(item)
		contact.monitorStatus(fn newStatus { setLabel(item) })
	}

	swtGrid`$panel: $list.X.Y
			$addButton.X`
}
